/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type Funds = {
  _id: string;
  _type: "funds";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  url?: string;
  imageUrl?: string;
  raised?: number;
  target?: number;
  currency?: string;
};

export type Links = {
  _id: string;
  _type: "links";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  text?: string;
  url?: string;
  type?: Array<string>;
};

export type SiteContent = {
  _id: string;
  _type: "siteContent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  contentName?: string;
  landingTitle?: string;
  landingSubtitle?: string;
  aboutText?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
  | Funds
  | Links
  | SiteContent;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/sanity.query.ts
// Variable: contentQuery
// Query: *[_type == "siteContent" && contentName == "Main Page"]{    _id,    aboutText,    landingTitle,    landingSubtitle    }
export type ContentQueryResult = Array<{
  _id: string;
  aboutText: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  landingTitle: string | null;
  landingSubtitle: string | null;
}>;
// Variable: linksQuery
// Query: *[_type == "links"]{    _id,    text,    url,    type    }
export type LinksQueryResult = Array<{
  _id: string;
  text: string | null;
  url: string | null;
  type: Array<string> | null;
}>;
// Variable: fundsQuery
// Query: *[_type == "funds"]{    _id,    title,    url,    imageUrl,    raised,    target,    currency    }
export type FundsQueryResult = Array<{
  _id: string;
  title: string | null;
  url: string | null;
  imageUrl: string | null;
  raised: number | null;
  target: number | null;
  currency: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "siteContent" && contentName == "Main Page"]{\n    _id,\n    aboutText,\n    landingTitle,\n    landingSubtitle\n    }': ContentQueryResult;
    '*[_type == "links"]{\n    _id,\n    text,\n    url,\n    type\n    }': LinksQueryResult;
    '*[_type == "funds"]{\n    _id,\n    title,\n    url,\n    imageUrl,\n    raised,\n    target,\n    currency\n    }': FundsQueryResult;
  }
}
